JUC包中的原子类分为哪4类

1.基本类型，使用原子的方式更新基本类型
  AtomicInteger：整型原子类
  AtomicLong：长整型原子类
  AtomicBoolean ：布尔型原子类
  
2.数组类型，使用原子的方式更新数组里的某个元素
  AtomicIntegerArray：整型数组原子类
  AtomicLongArray：长整型数组原子类
  AtomicReferenceArray ：引用类型数组原子类
  
3.引用类型
  AtomicReference：引用类型原子类
  AtomicReferenceFieldUpdater：原子更新引用类型里的字段
  AtomicMarkableReference ：原子更新带有标记位的引用类型
  
4.对象的属性修改类型
  AtomicIntegerFieldUpdater:原子更新整型字段的更新器
  AtomicLongFieldUpdater：原子更新长整型字段的更新器
  AtomicStampedReference ：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，
  可以解决使用CAS进行原子更新时可能出现的ABA问题。
  AtomicMarkableReference：原子更新带有标记的引用类型。该类将boolean标记与引用关联起来，也可以解决使用CAS进行原子更新时可能
  出现的ABA问题。
  
CAS ABA 问题
描述: 第一个线程取到了变量x的值A，然后巴拉巴拉干别的事，总之就是只拿到了变量x的值A。这段时间内第二个线程也取到了变量x的值A，
然后把变量x的值改为B，然后巴拉巴拉干别的事，最后又把变量x的值变为A（相当于还原了）。在这之后第一个线程终于进行了变量x的操作。
但是此时变量x的值还是A，所以compareAndSet操作是成功。

CAS实现原子操作3大问题
ABA问题；
CAS执行时间长，会消耗CPU资源，开销大；
CAS操作只能执行保证一个共享变量。

使用synchronized会比CAS操作慢和效率低
(悲观锁) 使用synchronized关键字，只允许一个线程进入同步代码块进行操作，而其他线程就必须在同步代码块外等待，此时其他线程就进入了
BLOCKED状态，不占用CPU资源。而当前线程操作完之后，会释放锁，其他线程会去抢锁，如果抢到了就会被调到CPU中进行执行。很明显，使用synchronized
的同步代码，线程会在阻塞状态进入运行状态之间切换，有一个上下文切换的过程，该过程会浪费时间。

(乐观锁) 使用CAS操作，CAS是比较并交换，因为CAS操作时原子性的，始终只会存在一个线程去执行CAS，所以不会存在线程安全问题。
那么就会使得所有线程去操作的时候，都会去比较，如果比较正确就执行交换，如果不正确就再次循环去拿新的值。当一个线程在CAS操作时，
其他线程都会一直循环，空循环，所有线程一直都是在执行中，少了上下文的切换。所以CAS操作效率会高很多，执行速度会快很多。

由于synchronized在线程调度上有上下文切换，浪费很多时间，而CAS操作的每一个线程都是一直循环然后比较值，没有上下文的切换，所以CAS会快很多。
