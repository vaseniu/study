内核空间和用户空间

操作系统大都通过内核空间和用户空间的设计来保护操作系统自身的安全性和稳定性。

对于一个进程来讲，从用户空间进入内核空间并最终返回到用户空间，这个过程是十分复杂的。
举个例子，比如我们经常接触的概念 "堆栈"，其实进程在内核态和用户态各有一个堆栈。运行在
用户空间时进程使用的是用户空间中的堆栈，而运行在内核空间时，进程使用的是内核空间中的堆栈。
所以说，Linux 中每个进程有两个栈，分别用于用户态和内核态。

每个处理器在任何指定时间点上的活动概括为下列三者之一：

1.运行于用户空间，执行用户进程。
2.运行于内核空间，处于进程上下文，代表某个特定的进程执行。
3.运行于内核空间，处于中断上下文，与任何进程无关，处理某个特定的中断。

Linux 系统的中断服务程序不在进程的上下文中执行，它们在一个与所有进程都无关的、
专门的中断上下文中执行。之所以存在一个专门的执行环境，就是为了保证中断服务程序
能够在第一时间响应和处理中断请求，然后快速地退出。

用户空间的应用程序，通过系统调用，进入内核空间。这个时候用户空间的进程要传递很多变量、
参数的值给内核，内核态运行的时候也要保存用户进程的一些寄存器值、变量等。所谓的“进程上下文”，
可以看作是用户进程传递给内核的这些参数以及内核要保存的那一整套的变量和寄存器值和当时的环境等。 

硬件通过触发信号，导致内核调用中断处理程序，进入内核空间。这个过程中，硬件的一些变量和参数也要
传递给内核，内核通过这些参数进行中断处理。所谓的“中断上下文”，其实也可以看作就是硬件传递过来的
这些参数和内核需要保存的一些其他环境（主要是当前被打断执行的进程环境）。