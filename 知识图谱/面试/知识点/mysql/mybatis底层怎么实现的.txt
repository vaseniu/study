Mybatis底层原理

核心组件：
Configuration：用于描述 MyBatis主配置文件信息，MyBatis框架在启动时会加载主配置文件，
将配置信息转换为Configuration对象。

SqlSession：面向用户的API，是MyBatis与数据库交互的接口。

Executor：SQL执行器，用于和数据库交互。SqlSession可以理解为Executor组件的外观（外观模式），
真正执行SQL的是Executor组件。

MappedStatement：用于描述SQL配置信息，MyBatis框架启动时，XML文件或者注解配置的SQL信息会
被转换为MappedStatement对象注册到Configuration组件中。

StatementHandler：封装了对JDBC中Statement对象的操作，包括为Statement参数占位符设置值，
通过Statement对象执行SQL语句。

TypeHandler：类型处理器，用于Java类型与JDBC类型之间的转换。

ParameterHandler：用于处理SQL中的参数占位符，为参数占位符设置值。

ResultSetHandler：封装了对ResultSet对象的处理逻辑，将结果集转换为Java实体对象。

Mapper执行流程：

SqlSession组件，它是用户层面的API。用户可利用SqlSession获取想要的Mapper对象
（MapperProxy代理对象）；当执行Mapper的方法，MapperProxy会创建对应的MapperMetohd，
然后MapperMethod底层其实是利用SqlSession来执行SQL。

但是真正执行SQL操作的是Executor组件，Executor可以理解为SQL执行器，它会使用StatementHandler
组件对JDBC的Statement对象进行操作。当Statement类型为CallableStatement和PreparedStatement时，
会通过ParameterHandler组件为参数占位符赋值。

ParameterHandler组件中会根据Java类型找到对应的TypeHandler对象，TypeHandler中会通过Statement
对象提供的setXXX()方法（例如setString()方法）为Statement对象中的参数占位符设置值。

StatementHandler组件使用JDBC中的Statement对象与数据库完成交互后，当SQL语句类型为SELECT时，
MyBatis通过ResultSetHandler组件从Statement对象中获取ResultSet对象，然后将ResultSet对象
转换为Java对象。

SqlSession为主要的调配者，持有Configuration与Executor，先是创建Mapper委托Configuration
去以MapperProxy给Mapper接口做动态代理，底层查询方法根据mapper.xml的查询类型执行SqlSession的
查询方法，而SqlSession在查询时又委托Executor去做实际的查询，Executor会使用Statement查询结果集，
然后使用ResultSetmapping做结果集的映射POJO，然后返回给SqlSession，因为动态代理，所以mapper的
方法实际是SqlSession执行的查询方法，所以这时候SqlSession返回给方法查询结果，表面看起来像是
Mapper的方法返回的结果，实际上却是SqlSession在做事情。











